<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap id="memberResultSet" type="Member" >
	
		<!-- DB 기본키에 해당하는 필드와 컬럼을 작성 property : 자바필드명, column : DB컬럼 -->
		<id property="memberNo" column="MEMBER_NO"/>
		
		<!-- DB 일반 컬럼에 해당하는 필드와 컬럼을 작성 -->
		<result property="memberId" column="MEMBER_ID" />
		<result property="memberPwd" column="MEMBER_PWD" />
		<result property="memberName" column="MEMBER_NM" />
		<result property="memberPhone" column="MEMBER_PHONE" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberEnrollDate" column="MEMBER_ENROLL_DT" />
		<result property="memberStatus" column="MEMBER_STATUS" />
		<result property="memberGrade" column="MEMBER_GRADE" />
	
	</resultMap>
	
	<resultMap id="myReplyResultSet" type="MyReply" >
		<!-- DB 기본키에 해당하는 필드와 컬럼을 작성 property : 자바필드명, column : DB컬럼 -->
		<id property="replyNo" column="REPLY_NO"/>
		<!-- DB 일반 컬럼에 해당하는 필드와 컬럼을 작성 -->
		<result property="rarentBoardNo" column="PARENT_BOARD_NO" />
		<result property="rarentBoardTitle" column="BOARD_TITLE" />
		<result property="rarentBoardType" column="BOARD_TYPE" />
		<result property="rerlyMemberNo" column="REPLY_MEMBER_NO" />
		<result property="rerlyContent" column="REPLY_CONTENT" />
		<result property="rerlyEnrollDt" column="REPLY_ENROLL_DT" />
		<result property="replyStatus" column="REPLY_STATUS" />
	</resultMap>
	
	<resultMap id="myBoardResultSet" type="MyBoard" >
		<!-- DB 기본키에 해당하는 필드와 컬럼을 작성 property : 자바필드명, column : DB컬럼 -->
		<id property="boardNo" column="BOARD_NO"/>
		<!-- DB 일반 컬럼에 해당하는 필드와 컬럼을 작성 -->
		<result property="boardWriter" column="BOARD_WRITER" />
		<result property="boardType" column="BOARD_TYPE" />
		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="boardEnrollDate" column="BOARD_ENROLL_DATE" />
		<result property="boardModiftDate" column="BOARD_MODIFY_DATE" />
		<result property="boardStatus" column="BOARD_STATUS" />
		<result property="qnaCode" column="QUESTION_CODE" />
		<result property="startDate" column="START_DATE" />
		<result property="endDate" column="END_DATE" />
		<result property="views" column="VIEWS" />
		<result property="boardCategory" column="BOARD_CATEGORY" />
	</resultMap>
	
	<resultMap id="myPassResultSet" type="MyPass" >
		<!-- DB 기본키에 해당하는 필드와 컬럼을 작성 property : 자바필드명, column : DB컬럼 -->
		<id property="merchantUid" column="MERCHANT_UID"/>
		<!-- DB 일반 컬럼에 해당하는 필드와 컬럼을 작성 -->
		<result property="classNm" column="CLASS_NM" />
		<result property="amount" column="AMOUNT" />
		<result property="raymentDate" column="PAYMENT_DATE" />
		<result property="trainerName" column="MEMBER_NM" />
		<result property="classCnt" column="CLASS_CNT" />
		<result property="trainerNo" column="TRAINER_NO" />
	</resultMap>
	
	<resultMap id="MyStudentsResultSet" type="MyStudents" >
		<!-- DB 기본키에 해당하는 필드와 컬럼을 작성 property : 자바필드명, column : DB컬럼 -->
		<id property="studentsName" column="MEMBER_NM"/>
		<!-- DB 일반 컬럼에 해당하는 필드와 컬럼을 작성 -->
		<result property="studentsPhone" column="MEMBER_PHONE" />
	</resultMap>
	
	 <resultMap type="TrainerSchedule" id="TrainerScheduleResultSet">
        <result property="scheduleTime" column="SCHEDULE_TIME"/>
        <result property="trainerNo" column="TRAINER_NO"/>
        <result property="scheduleStatus" column="SCHEDULE_STATUS"/>
    </resultMap>
    
    <resultMap type="PT" id="MemberScheduleResultSet">
       <result property="memberNo" column="MEMBER_NO"/>
       <result property="trainerNo" column="TRAINER_NO"/>
        <result property="scheduleTime" column="SCHEDULE_TIME"/>
        <result property="ptStatus" column="PT_STATUS"/>
    </resultMap>
   
   <resultMap type="reservationCancel" id="cancelResultSet">
        <result property="scheduleTime" column="SCHEDULE_TIME"/>
        <result property="memberName" column="MEMBER_NM"/>
        <result property="memberPhone" column="MEMBER_PHONE"/>
    </resultMap>
    
     <resultMap type="Review" id="reviewResultSet">
      <id property="reviewNo" column="REVIEW_NO"/>
      <result property="reviewContent" column="REVIEW_CONTENT"/>
      <result property="reviewRating" column="REVIEW_RATING"/>
      <result property="reviewCreateDate" column="REVIEW_CREATE_DT"/>
      <result property="memberId" column="MEMBER_ID"/>
      <result property="trainerNo" column="TRAINER_NO"/>
      <result property="trainerNM" column="TRAINER_NM"/>
   </resultMap>
   
   <!-- 회원가입 -->
   <insert id="signUp" parameterType="Member">
   INSERT INTO MEMBER 
   VALUES (SEQ_MNO.NEXTVAL, #{memberId}, #{memberPwd}, #{memberName}, #{memberPhone}, #{memberEmail}, SYSDATE, DEFAULT, DEFAULT)
   </insert>
   
   <!-- 로그인 -->
   <select id="loginMember" parameterType="Member" resultMap="memberResultSet">
      SELECT * FROM MEMBER
      WHERE MEMBER_ID=#{memberId}
      AND MEMBER_STATUS IN('Y', 'S')
   </select>
   
   <!-- 아이디 중복체크 -->
   <select id="idDupCheck" parameterType="string" resultType="_int">
      SELECT COUNT(*) FROM MEMBER
      WHERE MEMBER_ID=#{memberId}
      AND MEMBER_STATUS='Y'
   </select>
   
   <!-- 이메일 중복체크 -->
   <select id="emailDupCheck" parameterType="string" resultType="_int">
         SELECT COUNT(*) FROM MEMBER
      WHERE MEMBER_EMAIL=#{memberEmail}
      AND MEMBER_STATUS='Y'
   </select>
   
   
   <!-- 회원 비밀번호 확인용 -->
   <select id="checkPwd" parameterType="_int" resultType="string">
      SELECT MEMBER_PWD FROM MEMBER WHERE MEMBER_NO = #{memberNo}
   </select>
   
   <!-- 마이페이지에서 내용 수정 -->
   <update id="updateMember" parameterType="Member">
      UPDATE MEMBER SET MEMBER_PWD = #{memberPwd}, MEMBER_NM = #{memberName}, MEMBER_EMAIL = #{memberEmail}, MEMBER_PHONE = #{memberPhone}
      WHERE MEMBER_NO = #{memberNo}
   </update>
   
   <!-- 회원탈퇴 -->
   <update id="removeMember" parameterType="Member">
      UPDATE MEMBER SET MEMBER_STATUS = 'N' WHERE MEMBER_NO = #{memberNo}
   </update>
   
	<!-- 내 댓글 조회 -->
 	<select id="myReplyList" parameterType="MyReply" resultMap="myReplyResultSet">
		SELECT REPLY_NO, BOARD_TITLE, REPLY_CONTENT, REPLY_ENROLL_DT, REPLY_STATUS, PARENT_BOARD_NO, BOARD_TYPE FROM REPLY 
 		JOIN BOARD ON(PARENT_BOARD_NO=BOARD_NO)WHERE REPLY_MEMBER_NO = #{rerlyMemberNo} AND REPLY_STATUS ='Y' ORDER BY REPLY_NO DESC
 	</select>
   
   <!-- 내 댓글 페이징 처리 -->
   <select id="MyReplyListCount" parameterType="_int" resultType = "_int">
      SELECT COUNT(*) FROM REPLY WHERE REPLY_MEMBER_NO = #{rerlyMemberNo} AND REPLY_STATUS = 'Y'
   </select>
   
   <!-- 내 게시판 페이징 처리 -->
   <select id="MyBoardListCount" parameterType="_int" resultType = "_int">
      SELECT COUNT(*) FROM BOARD WHERE BOARD_WRITER = #{boardWriter} AND BOARD_STATUS = 'Y'
   </select>
   
   <!-- 내 게시글 조회 -->
   <select id="myBoardList" parameterType="MyBoard" resultMap="myBoardResultSet">
      SELECT BOARD_NO,BOARD_WRITER,BOARD_TYPE,BOARD_TITLE,BOARD_CONTENT,BOARD_ENROLL_DATE,BOARD_MODIFY_DATE,BOARD_STATUS,QUESTION_CODE,START_DATE,END_DATE,VIEWS,BOARD_CATEGORY FROM BOARD JOIN BOARD_TYPE USING(BOARD_TYPE) WHERE BOARD_WRITER = #{boardWriter} AND BOARD_STATUS = 'Y' ORDER BY BOARD_NO DESC
   </select>
   
   <!-- 이용권 및 결제정보 페이징 처리 -->
   <select id="MyPassListCount" parameterType="_int" resultType = "_int">
      SELECT COUNT(*) FROM PAYMENT WHERE MEMBER_NO=#{memberNo}
   </select>
   
   <!-- 이용권 및 결제정보 -->
   <!-- <select id="myPassList" parameterType="MyPass" resultMap="myPassResultSet">
      SELECT (SELECT MEMBER_NM FROM MEMBER WHERE MEMBER_NO IN (SELECT B.TRAINER_NO FROM PAYMENT B JOIN CLASS_STATUS C ON(B.MEMBER_NO=C.MEMBER_NO) WHERE B.MEMBER_NO=#{memberNo} AND C.CLASS_CNT >= 1))as MEMBER_NM,MERCHANT_UID,CLASS_NM,AMOUNT,PAYMENT_DATE,CLASS_CNT, PAYMENT.TRAINER_NO 
      FROM PAYMENT JOIN CLASS_STATUS USING(MEMBER_NO) JOIN MEMBER USING(MEMBER_NO)
      WHERE MEMBER_NO=#{memberNo}
   </select> -->
   
   
   <select id="myPassList" parameterType="MyPass" resultMap="myPassResultSet">
      	SELECT M.MEMBER_NM, P.*, J.CLASS_CNT FROM PAYMENT P
		JOIN MEMBER M ON(M.MEMBER_NO=P.TRAINER_NO) JOIN CLASS_STATUS J ON(J.MEMBER_NO=P.MEMBER_NO)
		WHERE P.TRAINER_NO IN (SELECT TRAINER_NO FROM CLASS_STATUS WHERE MEMBER_NO=#{memberNo})
		AND P.MEMBER_NO = #{memberNo} AND J.TRAINER_NO = P.TRAINER_NO
   </select>
   
   
   <!-- 아이디찾기 -->
   <select id="findId" parameterType="string" resultType="string">
      SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_EMAIL=#{email} AND MEMBER_STATUS='Y'
   </select>
   
   <!-- 내 수강생 조회 페이징 처리 -->
   <select id="MyStudentsListCnt" parameterType="_int" resultType = "_int">
      SELECT COUNT(*) FROM CLASS_STATUS WHERE TRAINER_NO = #{memberNo} AND CLASS_CNT > 0
   </select>
   
   <!-- 내 수강생 조회 -->
   <select id="myStudentsList" parameterType="MyStudents" resultMap="MyStudentsResultSet">
      SELECT MEMBER_NM, MEMBER_PHONE FROM CLASS_STATUS JOIN MEMBER USING(MEMBER_NO) WHERE TRAINER_NO = #{memberNo}
   </select>
   
   <!-- 비밀번호 찾기 - 아이디, 이메일확인 -->
   <select id="checkId" parameterType="Member" resultType="_int">
      SELECT COUNT(*) FROM MEMBER WHERE MEMBER_ID=#{memberId} AND MEMBER_EMAIL=#{memberEmail}
   </select>
   
   
   <!-- 비밀번호 찾기 - 임시비밀번호 저장 -->
   <update id="updatePw" parameterType="Member">
      UPDATE MEMBER SET MEMBER_PWD = #{memberPwd} WHERE MEMBER_ID = #{memberId} AND MEMBER_EMAIL=#{memberEmail}
   </update>
   
   <!-- 다음 리뷰번호 받아오기  -->
   <select id="selectReviewNo" resultType="_int">
      SELECT SEQ_RVNO.NEXTVAL FROM DUAL
   </select>
   <!-- 리뷰등록 -->
   <insert id="insertReview" parameterType="Review">
      INSERT INTO REVIEW VALUES(#{reviewNo}, #{reviewContent}, #{reviewRating}, SYSDATE, 'Y', #{memberNo}, #{trainerNo},#{merchantUid})
    </insert>
    
   <!-- 리뷰 작성 여부 확인 -->
   <select id="checkReview" parameterType="_int" resultType="_int">
         SELECT COUNT(*)    FROM REVIEW WHERE MERCHANT_UID=#{mUid}
   </select>
   
   <!-- 회원 스케줄 조회 -->
   <select id="myPt" parameterType="_int" resultMap="MemberScheduleResultSet">
      SELECT * FROM PT WHERE MEMBER_NO=#{memberNo} ORDER BY SCHEDULE_TIME
   </select>
   
   <!-- 트레이너 스케줄 조회 -->
   <select id="myTPt" parameterType="_int" resultMap="TrainerScheduleResultSet">
      SELECT * FROM TRAINER_SCHEDULE WHERE TRAINER_NO=#{memberNo} ORDER BY SCHEDULE_TIME
   </select>
   

   <select id="cancel" parameterType="_int" resultMap="cancelResultSet">
      SELECT (SELECT MEMBER_NM FROM MEMBER WHERE MEMBER_NO=(SELECT DISTINCT TRAINER_NO FROM PT WHERE MEMBER_NO=#{memberNo})) AS MEMBER_NM,
SCHEDULE_TIME,(SELECT MEMBER_PHONE FROM MEMBER WHERE MEMBER_NO=(SELECT DISTINCT TRAINER_NO FROM PT WHERE MEMBER_NO=#{memberNo})) AS MEMBER_PHONE
FROM MEMBER JOIN PT USING (MEMBER_NO)
WHERE MEMBER_NO=#{memberNo}
ORDER BY SCHEDULE_TIME ASC
   </select>
   
   <delete id="reservationCancel" parameterType="reservationCancel">
   DELETE FROM PT WHERE MEMBER_NO=#{memberNo} AND SCHEDULE_TIME=#{scheduleTime}
   </delete>

   <!-- 리뷰삭제 -->
   <update id="deleteReview" parameterType="_int" >
      UPDATE REVIEW SET REVIEW_STATUS = 'N' WHERE REVIEW_NO=#{reviewNo}
   </update>

    <update id="plusCoupon"  parameterType="reservationCancel">
      UPDATE CLASS_STATUS SET CLASS_CNT=CLASS_CNT+1 WHERE MEMBER_NO=#{memberNo}
    </update>
    
     <update id="trainerSchedule"  parameterType="reservationCancel">
      UPDATE TRAINER_SCHEDULE SET SCHEDULE_STATUS='Y' WHERE SCHEDULE_TIME=#{scheduleTime}
    </update>
    
    
   <!-- 내 리뷰 페이징 처리 -->
   <select id="MyReviewListCnt" parameterType="_int" resultType = "_int">
   SELECT COUNT(*) FROM REVIEW WHERE REVIEW_WRITER = #{memberNo} AND REVIEW_STATUS = 'Y' 
   </select>
   
   <!-- 내 리뷰 조회 -->
 	<select id="myReviewList" parameterType="Review" resultMap="reviewResultSet">
	SELECT R.*, M.MEMBER_NM TRAINER_NM
	FROM REVIEW R
	JOIN MEMBER M ON(R.TRAINER_NO=M.MEMBER_NO)
	WHERE REVIEW_WRITER = #{memberNo} AND REVIEW_STATUS = 'Y'
 	</select>
   
   <!-- 휴면계정 해제 -->
   <update id="changeStatus" parameterType="_int">
      UPDATE MEMBER SET MEMBER_STATUS='Y' WHERE MEMBER_NO=#{memberNo}
   </update>
   
   
   <!-- 리뷰 수정 -->
   <update id="updateReview" parameterType="Review">
      UPDATE REVIEW SET REVIEW_CONTENT = #{reviewContent}, REVIEW_RATING=#{reviewRating} WHERE REVIEW_NO=#{reviewNo}
   </update>


</mapper>

